#!/usr/bin/python

import sys
import os

argumentList = sys.argv[1:]
output = os.popen("git branch -vv").readlines()
newDict = {}

def check_match():
    newDictSet = set(newDict.values())
    arg = argumentList[0] 
    if "*" + arg in newDictSet or " " + arg in newDictSet:
        os.system("git branch -D " + arg)
    else:
	print("\nThere is no branch with that name!!!!!!!")
	delete()

def delete():
    listKeys = newDict.keys()
    listKeys.sort()
    print("\n")
    for key in listKeys:
        print(str(key) + ":" + newDict.get(key))
	if key == len(newDict):
	    print("\n")

    userInput = raw_input("Which branch/branches do you want to delete? ")
    branchesToDelete = userInput.split()

    intList = []
    isCorrectFormat = True
    for num in branchesToDelete:
        try:
            parsedInt = int(num)
	    intList.append(parsedInt)
	except ValueError:
	    isCorrectFormat = False 
    if isCorrectFormat == False:
	print("\nPlease enter only numbers, separated by space!!!!!!!")
	delete()
    else:
        for val in intList:
            branchToDelete = newDict.get(val)
	    if branchToDelete is not None:
                os.system("git branch -D " + branchToDelete[1:])   
	    else:
		print("\nCould not find a match for all the indices!!!!!!!")
		delete()

def create_map():
    for idx, val in enumerate(output):
        splitted = val.split()
        if splitted[0] == "*":
	    newDict.update({ idx + 1:splitted[0] + splitted[1] })
        else:
	    newDict.update({ idx + 1:" " + splitted[0] })

create_map()

if len(argumentList) > 1:
    print("There are way too arguments. You cannot use more than one argument")
elif len(argumentList) == 1 :
    check_match()
else:
    delete()
